/*
This is the sample given in the assignments description
*/
class InheritedUtility {
 int member1;};
class Utility : InheritedUtility, Util2 {
 int var1[4][5][7][8][9][1][0];
 float var2;
 int findMax(int array[100], float var2);
 int findMin(int array[100]);
 int findMin2();};
int Utility::findMax(int array[100], float var2){
 int maxValue;
 return (maxValue);};
int Utility::findMin(int array[100]){
 int minValue;
 int idx;
 minValue = array[100][200];
 for( int idx = 1; idx <= 99; idx = ( idx ) + 1) {
 if(array[idx] < maxValue + 1 / 8 or idx) then {
 maxValue = array[idx].dotP().idx[3][5].idx;
 maxValue = maxValue + 1;}
 else{
maxValue = array[0];
 };
 };
  for( int idx = 1; idx <= 99; idx = ( idx ) + 1) {
  int forvar[2];
  int forvar2[2];
  forvar = forvar2;
 };
 if(minValue <= 1) then {
 int ifvar;
 }else{};
 return (minValue);};
float randomize(){
 float value;
 value = 100 * (2 + 3.0 / 7.0006);
 value = 1.05 + ((2.04 * 2.47) - 3.0) + 7.0006 > 1 and not - 1;
 return (value);};
 int randomize2(){
 float value;
 for(int i = 0; i < 3; i = i +1){
 for(int j = 0; j < 3; j = j+1){
 int min;
 min = 0;
 };
 };
 return (1);};
program {
 int sample[100];
 int idx;
 int maxValue;
 int minValue;
 Utility utility;
 Utility arrayUtility[2][3][6][7];
 maxValue = utility.findMax(sample);
 minValue = utility.findMin(sample);
 utility.var1[4][1][0][0][0][0][0] = 10;
 arrayUtility[utility.var1[1][2][3][4][5][6][idx+maxValue]][1][1][1].var2 = 2.5;
 put(maxValue);
 put(minValue);
 if(i < 1) then{
    float main;
    i = 0;
 }else{
    i = 1;
 };
 };